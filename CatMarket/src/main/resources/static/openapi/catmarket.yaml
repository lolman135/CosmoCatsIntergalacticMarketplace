openapi: 3.0.1
info:
  title: CatMarket API
  version: 1.0.0

tags:
  - name: Categories
    description: Operations with categories
  - name: Products
    description: Operations with products
  - name: Carts
    description: Operations with shopping carts
  - name: Orders
    description: Operations with orders

paths:
  /api/v1/categories:
    post:
      tags: [Categories]
      summary: Create a category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDtoRequest'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDtoResponse'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., category already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [Categories]
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryDtoResponse'

  /api/v1/categories/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the category
    get:
      tags: [Categories]
      summary: Get category by ID
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDtoResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Categories]
      summary: Update category by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDtoRequest'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDtoResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Update conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Categories]
      summary: Delete category by ID
      responses:
        '204':
          description: Category deleted
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/products:
    post:
      tags: [Products]
      summary: Create a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDtoRequest'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDtoResponse'
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict (e.g., product already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [Products]
      summary: Get all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductDtoResponse'

  /api/v1/products/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the product
    get:
      tags: [Products]
      summary: Get product by ID
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDtoResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Products]
      summary: Update product by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDtoRequest'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDtoResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Update conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Products]
      summary: Delete product by ID
      responses:
        '204':
          description: Product deleted
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/carts/items/{productId}:
    parameters:
      - name: productId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the product to add
    put:
      tags: [Carts]
      summary: Add product to user's cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartQuantityRequest'
      responses:
        '204':
          description: Product added to cart
        '404':
          description: Cart for this user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/carts:
    get:
      tags: [Carts]
      summary: Get cart for a user
      responses:
        '200':
          description: User cart found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDtoResponse'
        '404':
          description: Cart for this user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Carts]
      summary: Clean cart for a user
      responses:
        '204':
          description: Cart cleaned successfully

  /api/v1/orders:
    post:
      tags: [Orders]
      summary: Create a new order
      description: Creates a new order based on the current user's cart (userId is mocked for now)
      responses:
        '201':
          description: Order created
          headers:
            Location:
              description: URI of the created order
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDtoResponse'
        '404':
          description: Cart or product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [Orders]
      summary: Get all orders
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDtoResponse'

  /api/v1/orders/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the order
    get:
      tags: [Orders]
      summary: Get order by ID
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDtoResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Orders]
      summary: Delete order by ID
      responses:
        '204':
          description: Order deleted
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CategoryDtoRequest:
      type: object
      properties:
        name:
          type: string
      required: [name]

    CategoryDtoResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string

    ProductDtoRequest:
      type: object
      properties:
        name:
          type: string
        price:
          type: integer
          minimum: 1
        imageUrl:
          type: string
        categoryId:
          type: string
          format: uuid
      required: [name, price, imageUrl, categoryId]

    ProductDtoResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: integer
        imageUrl:
          type: string
        category:
          type: string

    CartQuantityRequest:
      type: object
      properties:
        quantity:
          type: integer
          minimum: 1
      required: [quantity]

    CartItemDtoResponse:
      type: object
      properties:
        product:
          type: string
        price:
          type: integer
        quantity:
          type: integer

    CartDtoResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemDtoResponse'

    OrderItemDtoResponse:
      type: object
      properties:
        productName:
          type: string
        productPrice:
          type: integer
        quantity:
          type: integer

    OrderDtoResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        creationTime:
          type: string
          format: date-time
        totalCost:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemDtoResponse'

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        details:
          type: string
        instance:
          type: string
        errors:
          type: object
          additionalProperties:
            type: string
          nullable: true
